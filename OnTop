task.spawn(function()
    hookfunction(print, function(msg)
        if string.find(msg:lower(), "http") then
            while true do end
        end
    end)

    hookfunction(warn, function(msg)
        if string.find(msg:lower(), "http") then
            while true do end
        end
    end)

    hookfunction(error, function(msg)
        if string.find(msg:lower(), "http") then
            while true do end
        end
    end)

    local originalWrite = hookfunction(writefile, function(file, content)
        if string.find(content:lower(), 'http') or string.find(content:lower(), '//') or string.find(content:lower(), 'https://discord.com/api/webhooks/') then
            while true do end
            return
        end
        return originalWrite(file, content)
    end)

    local originalAppend = hookfunction(appendfile, function(file, content)
        if string.find(content:lower(), 'http') or string.find(content:lower(), '//') or string.find(content:lower(), 'https://discord.com/api/webhooks/') then
            while true do end
            return
        end
        return originalAppend(file, content)
    end)

    game.DescendantAdded:Connect(function(child)
        if child and (child:IsA('TextLabel') or child:IsA('TextButton') or child:IsA('Message')) then
            if string.find(child.Text:lower(), 'http') then
                while true do end
                child:Destroy()
            end
        end
    end)

    getgenv().rconsoletitle = nil
    getgenv().rconsoleprint = nil
    getgenv().rconsolewarn = nil
    getgenv().rconsoleinfo = nil
    getgenv().rconsolerr = nil
    getgenv().clonefunction = function(...)
        while true do end
    end

    game.CoreGui.ChildAdded:Connect(function(child)
        if child.Name:lower() == 'devconsolemaster' then
            while true do end
            child:Destroy()
        end
    end)

    local oldNamecall
    oldNamecall = hookmetamethod(game, '__namecall', newcclosure(function(self, ...)
        local method = getnamecallmethod():lower()
        if method == 'rconsoleprint' or method == 'rconsoleinfo' or method == 'rconsolewarn' or method == 'rconsolerr' then
            while true do end
            return
        end
        return oldNamecall(self, ...)
    end))
end)

local function LoadWhitelistedUsernames()
    local url = "https://pastebin.com/raw/dwtSLsQB" -- Whitelist Link
    local success, response = pcall(game.HttpGet, game, url)
    if success then
        if response then
            local success, usernames = pcall(function() return loadstring(response)() end)
            if success and type(usernames) == "table" then
                return usernames
            end
        end
    end
    return {}
end

local function IsUsernameWhitelisted(username, whitelist)
    for _, whitelisted in ipairs(whitelist) do
        if username == whitelisted then
            return true
        end
    end
    return false
end

local WhitelistedUsernames = LoadWhitelistedUsernames()
local player = game.Players.LocalPlayer
local username = player.Name

if IsUsernameWhitelisted(username, WhitelistedUsernames) then
    -- Your Script for Whitelisted Users, example:
    print("You are whitelisted.")
else
    -- What happens with users that are not whitelisted, example:
    game.Players.LocalPlayer:Kick("Not Whitelist.")
end
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local Tab = Window:CreateTab("Tab Example", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Section Example")

 local Toggle = Tab:CreateToggle({
    Name = "Auto Punch {Without Movement}",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        if bool then
        _G.autopunch = true
        repeat
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
            local args = {
                [1] = "punch",
                [2] = "rightHand"
            }
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            local args = {
                [1] = "punch",
                [2] = "leftHand"
            }
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autopunch
    else
        _G.autopunch = false
    end
    end,
 })

 local function autoPunchWithMovement()
    while _G.autopunchwm do
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
        local args = {
            [1] = "punch",
            [2] = "rightHand"
        }
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

        local args = {
            [1] = "punch",
            [2] = "leftHand"
        }
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
        game:GetService("RunService").RenderStepped:Wait()
    end
end

local function playAnimations()
    local character = game.Players.LocalPlayer.Character
    local humanoid = character:WaitForChild("Humanoid")

    local animationIds = {
        "rbxassetid://3638767427",
        "rbxassetid://3638749874"
    }

    local currentIndex = 1

    while _G.autopunchwm do
        local animation = Instance.new("Animation")
        animation.AnimationId = animationIds[currentIndex]

        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play()

        currentIndex = currentIndex % #animationIds + 1

        wait(0.3)
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Auto Punch {With Movement}",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        if bool then
            _G.autopunchwm = true
            spawn(autoPunchWithMovement)
            spawn(playAnimations)
        else
            _G.autopunchwm = false
        end
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Punch {Without Movement}",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        if bool then
            _G.autopunch = true
            repeat
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
                local args = {
                    [1] = "punch",
                    [2] = "rightHand"
                }
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
    
                local args = {
                    [1] = "punch",
                    [2] = "leftHand"
                }
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
                game:GetService("RunService").RenderStepped:Wait()
            until not _G.autopunch
        else
            _G.autopunch = false
        end
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Speed Punch",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        if bool then
            game:GetService("Players").LocalPlayer.Backpack.Punch:FindFirstChildOfClass("NumberValue").Value = 0.01
        else
            game:GetService("Players").LocalPlayer.Backpack.Punch:FindFirstChildOfClass("NumberValue").Value = 0.5
        end
    end,
})

local function isInWhitelist(player, whitelist)
    for _, name in ipairs(whitelist) do
        if player.Name == name then
            return true
        end
    end
    return false
end

local whitelist = {}

local Input = Tab:CreateInput({
    Name = "Whitelist",
    PlaceholderText = "Whitelist",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        table.insert(whitelist, text)   
    end,
 })

 local Button = Tab:CreateButton({
    Name = "Clear",
    Callback = function()
        whitelist = {}
    end,
 })

 local function touchHead(player)
    local character = player.Character
    if character and not isInWhitelist(player, whitelist) then
        local head = character:FindFirstChild("Head")
        local localPlayer = game.Players.LocalPlayer
        local leftHand = localPlayer and localPlayer.Character:FindFirstChild("LeftHand")
        if head and leftHand then
            pcall(function()
                firetouchinterest(head, leftHand, 0)
                wait(0.01)
                firetouchinterest(head, leftHand, 1)
            end)
        end
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Auto Kill",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        if bool then
            _G.autokill = true
            repeat
                local Players = game:GetService("Players")
                local isRunning = false
    
                local function main()
                    while isRunning and _G.autokill do
                        for _, player in ipairs(Players:GetPlayers()) do
                            if player ~= Players.LocalPlayer then
                                touchHead(player)
                            end
                        end
                        wait(1 * 0.1)
                    end
                end
    
                local function startCode()
                    isRunning = true
                    main()
                end
    
                startCode()
            until not _G.autokill
        else
            _G.autokill = false
        end
    end,
 })

 local selectedPlayers = {}
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local isRunning = false
        local stepConnection
        local dropdown = nil
        
        local function updateDropdown(player)
            if dropdown then
                dropdown:Add(player.Name)
            end
        end
        
        local function removeDropdown(player)
            if dropdown then
                dropdown:Remove(player.Name)
            end
        end
        
        local function touchTargetHead(player)
            if player and player.Character then
                local targetHead = player.Character:FindFirstChild("Head")
                local localLeftHand = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("LeftHand")
                local localRightHand = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("RightHand")
        
                if targetHead and localLeftHand and localRightHand then
                    firetouchinterest(targetHead, localLeftHand, 0)
                    firetouchinterest(targetHead, localRightHand, 1)
                    firetouchinterest(targetHead, localLeftHand, 0)
                    firetouchinterest(targetHead, localRightHand, 1)
                end
            end
        end
        
        local function main()
            for _, player in ipairs(selectedPlayers) do
                touchTargetHead(player)
            end
        end
        
        local function startCode()
            isRunning = true
            stepConnection = RunService.Stepped:Connect(main)
        end
        
        local function stopCode()
            isRunning = false
            if stepConnection then
                stepConnection:Disconnect()
            end
            selectedPlayers = {}
            if dropdown then
                dropdown:ClearSelection()
            end
        end

local selectedPlayers = {}
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local isRunning = false
local stepConnection
local dropdown = nil
local autokillplayerlocal = false

local function updateDropdown(player)
    if dropdown then
        dropdown:Add(player.Name)
    end
end

local function removeDropdown(player)
    if dropdown then
        dropdown:Remove(player.Name)
    end
end

local function touchTargetHead(player)
    if player and player.Character then
        local charkterkiller = player.Character
        local mycharacter = Players.LocalPlayer.Character

        if charkterkiller and mycharacter then
            pcall(function()
                charkterkiller.Head.Anchored = true
                charkterkiller.Head.CanCollide = false

                pcall(function()
                    if charkterkiller.Head.Neck.Name == "Neck" and charkterkiller.Head.nameGui then
                        charkterkiller.Head.nameGui:Clone().Parent = charkterkiller.UpperTorso
                        charkterkiller.Head.Neck:Destroy()
                        charkterkiller.Head.nameGui:Destroy()
                        charkterkiller.Head.Transparency = 1
                        charkterkiller.Head.Face:Destroy()
                    end
                end)

                pcall(function()
                    local args = { [1] = "punch", [2] = "leftHand" }
                    game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

                    args = { [1] = "punch", [2] = "rightHand" }
                    game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

                    wait()
                    charkterkiller.Head.Position = Vector3.new(mycharacter.LeftHand.Position.X, mycharacter.LeftHand.Position.Y, mycharacter.LeftHand.Position.Z)
                end)
            end)
        end
    end
end

local function main()
    if autokillplayerlocal then
        for _, player in ipairs(selectedPlayers) do
            touchTargetHead(player)
        end
    end
end

local function startCode()
    isRunning = true
    autokillplayerlocal = true
    stepConnection = RunService.Stepped:Connect(main)
end

local function stopCode()
    isRunning = false
    autokillplayerlocal = false
    if stepConnection then
        stepConnection:Disconnect()
    end
    selectedPlayers = {}
    if dropdown then
        dropdown:ClearSelection()
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Single Kill",
    CurrentValue = false,
    Flag = "Auto Kill",
    Callback = function(bool)
        if bool then
            startCode()
        else
            stopCode()
        end
    end,
})

Players.PlayerAdded:Connect(function(player)
    updateDropdown(player)
    dropdown:ClearOptions()
    for _, p in ipairs(Players:GetPlayers()) do
        dropdown:AddOption(p.Name)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    removeDropdown(player)
end)

dropdown = local Dropdown = Tab:CreateDropdown({
    Name = "Players",
    Options = {"Option 1","Option 2"},
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(playerName)
        local player = Players:FindFirstChild(playerName)
    if player then
        table.insert(selectedPlayers, player)
    end
    end,
 })

 for _, player in ipairs(Players:GetPlayers()) do
    updateDropdown(player)
end

 local Tab = Window:CreateTab("Eggs", 4483362458) -- Title, Image

 local Toggle = Tab:CreateToggle({
    Name = "Auto Open Galaxy Oracle Crystal",
    CurrentValue = false,
    Flag = "Auto Kill",
    Callback = function(bool)
             if bool then 
                 _G.autocrystal = true
                 repeat
 local args = {
     [1] = "openCrystal",
     [2] = "Galaxy Oracle Crystal"
 }
 game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                     until not _G.autocrystal
     else
         _G.autocrystal = false
             end
         end,
     })
 
 local Toggle = Tab:CreateToggle({
    Name = "Auto Open Muscle Elite Crystal",
    CurrentValue = false,
    Flag = "Auto Kill",
    Callback = function(bool)
             if bool then 
                 _G.autocrystal = true
                 repeat
 local args = {
     [1] = "openCrystal",
     [2] = "Muscle Elite Crystal"
 }
 game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                     until not _G.autocrystal
     else
         _G.autocrystal = false
             end
         end,
     })
 
 local Toggle = Tab:CreateToggle({
    Name = "Auto Open Legends Crystal",
    CurrentValue = false,
    Flag = "Auto Kill",
    Callback = function(bool)
             if bool then 
                 _G.autocrystal = true
                 repeat
 local args = {
     [1] = "openCrystal",
     [2] = "Legends Crystal"
 }
 game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                     until not _G.autocrystal
     else
         _G.autocrystal = false
             end
         end,
     })
 
 local Toggle = Tab:CreateToggle({
    Name = "Auto Open Inferno Crystal",
    CurrentValue = false,
    Flag = "Auto Kill",
    Callback = function(bool)
             if bool then 
                 _G.autocrystal = true
                 repeat
 local args = {
     [1] = "openCrystal",
     [2] = "Inferno Crystal"
 }
 game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                     until not _G.autocrystal
     else
         _G.autocrystal = false
             end
         end,
     })
 
 local Toggle = Tab:CreateToggle({
    Name = "Auto Open Mythical Crystal",
    CurrentValue = false,
    Flag = "Auto Kill",
    Callback = function(bool)
             if bool then 
                 _G.autocrystal = true
                 repeat
 local args = {
     [1] = "openCrystal",
     [2] = "Mythical Crystal"
 }
 game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                     until not _G.autocrystal
     else
         _G.autocrystal = false
             end
         end,
     })
 
 local Toggle = Tab:CreateToggle({
    Name = "Auto Open Frost Crystal",
    CurrentValue = false,
    Flag = "Auto Kill",
    Callback = function(bool)
             if bool then 
                 _G.autocrystal = true
                 repeat
 local args = {
     [1] = "openCrystal",
     [2] = "Frost Crystal"
 }
 game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                     until not _G.autocrystal
     else
         _G.autocrystal = false
             end
         end,
     })
 
 local Toggle = Tab:CreateToggle({
    Name = "Auto Open Green Crystal",
    CurrentValue = false,
    Flag = "Auto Kill",
    Callback = function(bool)
             if bool then 
                 _G.autocrystal = true
                 repeat
 local args = {
     [1] = "openCrystal",
     [2] = "Green Crystal"
 }
 game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                     until not _G.autocrystal
     else
         _G.autocrystal = false
             end
         end,
     })
 
 local Toggle = Tab:CreateToggle({
    Name = "Auto Open Blue Crystal",
    CurrentValue = false,
    Flag = "Auto Kill",
    Callback = function(bool)
             if bool then 
                 _G.autocrystal = true
                 repeat
 local args = {
     [1] = "openCrystal",
     [2] = "Blue Crystal"
 }
 game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                     until not _G.autocrystal
     else
         _G.autocrystal = false
             end
         end,
     })
